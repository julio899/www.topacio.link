class w{constructor(i){this.callbacks=[],this.acu=0,this.data=i,this.divergencias={bajista:[],alcista:[]}}agregarCallback(i){this.callbacks.push(i)}procesarDivergencias(){console.time();const i=30;this.data.forEach((d,n)=>{if(this.data[n-i]!=null){const c=this.data.slice(n,n+(i-1)),f=parseInt(c.length/2),m=c.slice(0,f),g=c.slice(f+1,c.length);if(m.length>0&&g.length>0){let o=m.map(e=>e).sort((e,t)=>t.high-e.high)[0],s=g.map(e=>e).sort((e,t)=>t.high-e.high)[0],r=m.map(e=>e).sort((e,t)=>e.low-t.low)[0],l=g.map(e=>e).sort((e,t)=>e.low-t.low)[0];if(o.high<s.high&&o.rsi>s.rsi&&(s.close>s.hma10||s.high>s.bbh89)){let e=s.high-o.high,t=c.filter(a=>a.time>=o.time&&a.time<=s.time);const p=t.length;e=e/p;let h=o.high,u=t.flatMap(a=>(h+=e,{time:a.time,value:h,color:"pink"}));this.divergencias.bajista.push(u)}if(r.low>l.low&&r.rsi<l.rsi&&l.close<l.hma10&&l.close<l.hma20){let e=c.filter(a=>a.time>=r.time&&a.time<=l.time),t=l.low-r.low;const p=e.length;t=t/p;let h=r.low,u=e.flatMap(a=>(h+=t,{time:a.time,value:h,color:"#19f5eb"}));this.divergencias.alcista.push(u)}}}}),console.timeEnd()}iniciarProceso(){const i=this;return Promise.resolve(i.procesarDivergencias()).then(function(){i.callbacks.forEach(d=>{d(i.divergencias),i.callbacks=[]})})}}export{w as p};
